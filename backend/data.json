{
  "terms": [
    {
      "title": "Микросервисная архитектура",
      "description": "Архитектурный стиль разработки программного обеспечения, при котором приложение строится как набор небольших, независимых сервисов, каждый из которых выполняет свою конкретную функцию.",
      "source": "Martin Fowler - Microservices"
    },
    {
      "title": "Микросервис",
      "description": "Небольшие автономные службы, которые работают сообща.",
      "source": "Sam Newman - Building microservices"
    },
    {
      "title": "DevOps",
      "description": "Набор практик и культурных философий, направленных на объединение разработки (Dev) и операций (Ops) для повышения эффективности и качества доставки программного обеспечения.",
      "source": "Microsoft Docs - What is DevOps? (электронный ресурс)"
    },
    {
      "title": "Непрерывная доставка (Continuous Delivery)",
      "description": "Практика разработки программного обеспечения, при которой изменения кода автоматически тестируются и подготавливаются для выпуска в производство, обеспечивая быстрый и надежный релиз.",
      "source": "Официальная документация Jenkins (электронный ресурс)"
    },
    {
      "title": "Непрерывная интеграция (Continuous Integration)",
      "description": "Практика частого объединения кода разработчиков в общий репозиторий, сопровождаемая автоматическим тестированием для выявления ошибок на ранних стадиях.",
      "source": "Официальная документация Jenkins (электронный ресурс)"
    },
    {
      "title": "Мониторинг",
      "description": "Процесс наблюдения за состоянием системы или приложения в режиме реального времени для обнаружения и реагирования на возможные проблемы или сбои.",
      "source": "Официальная документация Prometheus"
    },
    {
      "title": "Логирование",
      "description": "Запись и хранение событий, действий и ошибок, происходящих в системе или приложении, для последующего анализа и отладки.",
      "source": "ELK Stack - Logging"
    },
    {
      "title": "Контейнеризация",
      "description": "Технология упаковки приложения и всех его зависимостей в изолированные контейнеры, обеспечивающие консистентность среды выполнения на разных платформах.",
      "source": "Docker Documentation - What is Containerization? (электронный ресурс)"
    },
    {
      "title": "Docker",
      "description": "Платформа для разработки, доставки и запуска контейнеризованных приложений, обеспечивающая изоляцию и переносимость между различными средами.",
      "source": "Официальная документация Docker (электронный ресурс)"
    },
    {
      "title": "Kubernetes",
      "description": "Система оркестрации контейнеров с открытым исходным кодом, которая автоматизирует развертывание, масштабирование и управление контейнеризованными приложениями.",
      "source": "Официальная документация Kubernetes (электронный ресурс)"
    },
    {
      "title": "Паттерн",
      "description": "Повторяющиеся решения общих проблем проектирования программного обеспечения, которые можно адаптировать под конкретные задачи.",
      "source": "Erich Gamma – Design Pattern"
    },
    {
      "title": "Брокер сообщений",
      "description": "Программное обеспечение, осуществляющее асинхронный обмен данными между различными приложениями или компонентами системы.",
      "source": "Крис Р. Микросервисы. Паттерны разработки и рефакторинга"
    },
    {
      "title": "API Gateway",
      "description": "Единая точка входа для всех клиентских запросов, маршрутизующая их к соответствующим микросервисам.",
      "source": "Крис Р. Микросервисы. Паттерны разработки и рефакторинга"
    },
    {
      "title": "API",
      "description": "Интерфейс программирования приложений, который определяет набор правил и протоколов для взаимодействия различных программных компонентов или систем.",
      "source": "Oracle - What is an API? (электронный ресурс)"
    },
    {
      "title": "REST",
      "description": "Архитектурный стиль для разработки веб-сервисов, основанный на использовании стандартных HTTP методов для взаимодействия с ресурсами через URL.",
      "source": "AWS - Что такое RESTful API? (электронный ресурс)"
    },
    {
      "title": "gRPC",
      "description": "Высокопроизводительный фреймворк удаленного вызова процедур (RPC), разработанный Google, использующий Protocol Buffers для сериализации данных и поддерживающий HTTP/2.",
      "source": "Официальная документация gRPC (электронный ресурс)"
    },
    {
      "title": "Фреймворк",
      "description": "Структурированная платформа для разработки программного обеспечения, предоставляющая готовые компоненты и инструменты для упрощения процесса разработки.",
      "source": "AWS - What is a Framework in Programming and Engineering? (электронный ресурс)"
    },
    {
      "title": "Ktor",
      "description": "Фреймворк для простого создания асинхронных серверных и клиентских приложений.",
      "source": "Официальная документация Ktor (электронный ресурс)"
    },
    {
      "title": "Quarkus",
      "description": "Фреймворк для создания облачных нативных Java-приложений с быстрым временем запуска и низким потреблением памяти, оптимизированный для контейнерных сред.",
      "source": "Официальная документация Quarkus (электронный ресурс)"
    },
    {
      "title": "Spring",
      "description": "Фреймворк для разработки Java-приложений, предоставляющий обширный набор инструментов и библиотек для упрощения создания корпоративных приложений.",
      "source": "Официальная документация Spring (электронный ресурс)"
    },
    {
      "title": "Spring Cloud",
      "description": "Набор инструментов для разработки распределенных систем и микросервисов на основе Spring.",
      "source": "Документация Spring Cloud (электронный ресурс)"
    },
    {
      "title": "Kotlin",
      "description": "Статически типизированный язык программирования, работающий на JVM и полностью совместимый с Java.",
      "source": "Официальный сайт Kotlin (электронный ресурс)"
    },
    {
      "title": "Apache Kafka",
      "description": "Распределенная платформа потоковой передачи данных, предназначенная для обработки и хранения больших объемов данных в реальном времени.",
      "source": "Официальная документация Apache Kafka (электронный ресурс)"
    }
  ],
  "relationships": [
    {
      "source": "Kotlin",
      "target": "Ktor",
      "relation": "разрабатывается"
    },
    {
      "source": "Kotlin",
      "target": "Quarkus",
      "relation": "разрабатывается"
    },
    {
      "source": "Kotlin",
      "target": "Spring",
      "relation": "разрабатывается"
    },
    {
      "source": "Spring",
      "target": "Spring Cloud",
      "relation": "реализует"
    },
    {
      "source": "Spring Cloud",
      "target": "Фреймворк",
      "relation": "является"
    },
    {
      "source": "Quarkus",
      "target": "Фреймворк",
      "relation": "является"
    },
    {
      "source": "Ktor",
      "target": "Фреймворк",
      "relation": "является"
    },
    {
      "source": "Фреймворк",
      "target": "Микросервис",
      "relation": "используется для разработки"
    },
    {
      "source": "Микросервис",
      "target": "Контейнеризация",
      "relation": "изолируется через"
    },
    {
      "source": "Микросервис",
      "target": "Микросервисная архитектура",
      "relation": "реализует"
    },
    {
      "source": "Контейнеризация",
      "target": "Docker",
      "relation": "реализуется с помощью"
    },
    {
      "source": "Контейнеризация",
      "target": "Kubernetes",
      "relation": "управляется с помощью"
    },
    {
      "source": "Контейнеризация",
      "target": "Микросервисная архитектура",
      "relation": "изолирует процессы в"
    },
    {
      "source": "Kubernetes",
      "target": "DevOps",
      "relation": "упрощает реализацию"
    },
    {
      "source": "Логирование",
      "target": "DevOps",
      "relation": "используется для"
    },
    {
      "source": "Мониторинг",
      "target": "DevOps",
      "relation": "используется для"
    },
    {
      "source": "Непрерывная доставка (Continuous Delivery)",
      "target": "DevOps",
      "relation": "используется для"
    },
    {
      "source": "Непрерывная интеграция (Continuous Integration)",
      "target": "DevOps",
      "relation": "используется для"
    },
    {
      "source": "Паттерн",
      "target": "Микросервисная архитектура",
      "relation": "реализует"
    },
    {
      "source": "Брокер сообщений",
      "target": "Apache Kafka",
      "relation": "является реализацией"
    },
        {
      "source": "Брокер сообщений",
      "target": "Паттерн",
      "relation": "является"
    },
    {
      "source": "API Gateway",
      "target": "Паттерн",
      "relation": "является"
    },
    {
      "source": "API Gateway",
      "target": "API",
      "relation": "управляет"
    },
    {
      "source": "REST",
      "target": "API",
      "relation": "архитектурный стиль"
    },
    {
      "source": "gRPC",
      "target": "API",
      "relation": "способ взаимодействия"
    }
  ]
}
